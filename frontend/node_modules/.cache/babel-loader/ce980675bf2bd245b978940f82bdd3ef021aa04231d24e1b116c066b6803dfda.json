{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Code Projects\\\\booking\\\\src\\\\index.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport FrontPage from './frontPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Fr, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// import React, { useState } from \"react\";\n// import { render } from \"react-dom\";\n// import Calendar from \"react-calendar\";\n// // import 'react-calendar/dist/Calendar.css';\n// import './calendar.css';\n\n// const ReactCalendar = () => {\n//   const [date, setDate] = useState(new Date());\n\n//   const onChange = date => {\n//     setDate(date);\n//   };\n\n//   return (\n//     <div>\n//       <Calendar onChange={onChange} value={date} />\n\n//     </div>\n//   );\n// };\n\n// render(<ReactCalendar />, document.querySelector(\"#root\"));\n\n// import {\n//   add,\n//   eachDayOfInterval,\n//   endOfMonth,\n//   format,\n//   getDay,\n//   isEqual,\n//   isSameDay,\n//   isSameMonth,\n//   isToday,\n//   parse,\n//   parseISO,\n//   startOfToday,\n// } from 'date-fns'\n// import { Fragment, useState } from 'react'\n\n// function classNames(...classes) {\n//   return classes.filter(Boolean).join(' ')\n// }\n\n// export default function Example() {\n//   let today = startOfToday()\n//   let [selectedDay, setSelectedDay] = useState(today)\n//   let [currentMonth, setCurrentMonth] = useState(format(today, 'MMM-yyyy'))\n//   let firstDayCurrentMonth = parse(currentMonth, 'MMM-yyyy', new Date())\n\n//   let days = eachDayOfInterval({\n//     start: firstDayCurrentMonth,\n//     end: endOfMonth(firstDayCurrentMonth),\n//   })\n\n//   function previousMonth() {\n//     let firstDayNextMonth = add(firstDayCurrentMonth, { months: -1 })\n//     setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'))\n//   }\n\n//   function nextMonth() {\n//     let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 })\n//     setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'))\n//   }\n\n//   return (\n//     <div className=\"pt-16\">\n//       <div className=\"max-w-md px-4 mx-auto sm:px-7 md:max-w-4xl md:px-6\">\n//         <div className=\"md:grid md:grid-cols-2 md:divide-x md:divide-gray-200\">\n//           <div className=\"md:pr-14\">\n//             <div className=\"flex items-center\">\n//               <h2 className=\"flex-auto font-semibold text-gray-900\">\n//                 {format(firstDayCurrentMonth, 'MMMM yyyy')}\n//               </h2>\n\n//             </div>\n//             <div className=\"grid grid-cols-7 mt-10 text-xs leading-6 text-center text-gray-500\">\n//               <div>S</div>\n//               <div>M</div>\n//               <div>T</div>\n//               <div>W</div>\n//               <div>T</div>\n//               <div>F</div>\n//               <div>S</div>\n//             </div>\n//             <div className=\"grid grid-cols-7 mt-2 text-sm\">\n//               {days.map((day, dayIdx) => (\n//                 <div\n//                   key={day.toString()}\n//                   className={classNames(\n//                     dayIdx === 0 && colStartClasses[getDay(day)],\n//                     'py-1.5'\n//                   )}\n//                 >\n//                   <button\n//                     type=\"button\"\n//                     onClick={() => setSelectedDay(day)}\n//                     className={classNames(\n//                       isEqual(day, selectedDay) && 'text-white',\n//                       !isEqual(day, selectedDay) &&\n//                         isToday(day) &&\n//                         'text-red-500',\n//                       !isEqual(day, selectedDay) &&\n//                         !isToday(day) &&\n//                         isSameMonth(day, firstDayCurrentMonth) &&\n//                         'text-gray-900',\n//                       !isEqual(day, selectedDay) &&\n//                         !isToday(day) &&\n//                         !isSameMonth(day, firstDayCurrentMonth) &&\n//                         'text-gray-400',\n//                       isEqual(day, selectedDay) && isToday(day) && 'bg-red-500',\n//                       isEqual(day, selectedDay) &&\n//                         !isToday(day) &&\n//                         'bg-gray-900',\n//                       !isEqual(day, selectedDay) && 'hover:bg-gray-200',\n//                       (isEqual(day, selectedDay) || isToday(day)) &&\n//                         'font-semibold',\n//                       'mx-auto flex h-8 w-8 items-center justify-center rounded-full'\n//                     )}\n//                   >\n//                     <time dateTime={format(day, 'yyyy-MM-dd')}>\n//                       {format(day, 'd')}\n//                     </time>\n//                   </button>\n\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//           <section className=\"mt-12 md:mt-0 md:pl-14\">\n//             <h2 className=\"font-semibold text-gray-900\">\n//               Schedule for{' '}\n//               <time dateTime={format(selectedDay, 'yyyy-MM-dd')}>\n//                 {format(selectedDay, 'MMM dd, yyy')}\n//               </time>\n//             </h2>\n\n//           </section>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\n// let colStartClasses = [\n//   '',\n//   'col-start-2',\n//   'col-start-3',\n//   'col-start-4',\n//   'col-start-5',\n//   'col-start-6',\n//   'col-start-7',\n// ]","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","FrontPage","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","Fr","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/VS Code Projects/booking/src/index.jsx"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport FrontPage from './frontPage';\n\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Fr />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import { render } from \"react-dom\";\n// import Calendar from \"react-calendar\";\n// // import 'react-calendar/dist/Calendar.css';\n// import './calendar.css';\n\n// const ReactCalendar = () => {\n//   const [date, setDate] = useState(new Date());\n\n//   const onChange = date => {\n//     setDate(date);\n//   };\n\n//   return (\n//     <div>\n//       <Calendar onChange={onChange} value={date} />\n      \n//     </div>\n//   );\n// };\n\n// render(<ReactCalendar />, document.querySelector(\"#root\"));\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import {\n//   add,\n//   eachDayOfInterval,\n//   endOfMonth,\n//   format,\n//   getDay,\n//   isEqual,\n//   isSameDay,\n//   isSameMonth,\n//   isToday,\n//   parse,\n//   parseISO,\n//   startOfToday,\n// } from 'date-fns'\n// import { Fragment, useState } from 'react'\n\n\n// function classNames(...classes) {\n//   return classes.filter(Boolean).join(' ')\n// }\n\n// export default function Example() {\n//   let today = startOfToday()\n//   let [selectedDay, setSelectedDay] = useState(today)\n//   let [currentMonth, setCurrentMonth] = useState(format(today, 'MMM-yyyy'))\n//   let firstDayCurrentMonth = parse(currentMonth, 'MMM-yyyy', new Date())\n\n//   let days = eachDayOfInterval({\n//     start: firstDayCurrentMonth,\n//     end: endOfMonth(firstDayCurrentMonth),\n//   })\n\n//   function previousMonth() {\n//     let firstDayNextMonth = add(firstDayCurrentMonth, { months: -1 })\n//     setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'))\n//   }\n\n//   function nextMonth() {\n//     let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 })\n//     setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'))\n//   }\n\n  \n\n//   return (\n//     <div className=\"pt-16\">\n//       <div className=\"max-w-md px-4 mx-auto sm:px-7 md:max-w-4xl md:px-6\">\n//         <div className=\"md:grid md:grid-cols-2 md:divide-x md:divide-gray-200\">\n//           <div className=\"md:pr-14\">\n//             <div className=\"flex items-center\">\n//               <h2 className=\"flex-auto font-semibold text-gray-900\">\n//                 {format(firstDayCurrentMonth, 'MMMM yyyy')}\n//               </h2>\n             \n//             </div>\n//             <div className=\"grid grid-cols-7 mt-10 text-xs leading-6 text-center text-gray-500\">\n//               <div>S</div>\n//               <div>M</div>\n//               <div>T</div>\n//               <div>W</div>\n//               <div>T</div>\n//               <div>F</div>\n//               <div>S</div>\n//             </div>\n//             <div className=\"grid grid-cols-7 mt-2 text-sm\">\n//               {days.map((day, dayIdx) => (\n//                 <div\n//                   key={day.toString()}\n//                   className={classNames(\n//                     dayIdx === 0 && colStartClasses[getDay(day)],\n//                     'py-1.5'\n//                   )}\n//                 >\n//                   <button\n//                     type=\"button\"\n//                     onClick={() => setSelectedDay(day)}\n//                     className={classNames(\n//                       isEqual(day, selectedDay) && 'text-white',\n//                       !isEqual(day, selectedDay) &&\n//                         isToday(day) &&\n//                         'text-red-500',\n//                       !isEqual(day, selectedDay) &&\n//                         !isToday(day) &&\n//                         isSameMonth(day, firstDayCurrentMonth) &&\n//                         'text-gray-900',\n//                       !isEqual(day, selectedDay) &&\n//                         !isToday(day) &&\n//                         !isSameMonth(day, firstDayCurrentMonth) &&\n//                         'text-gray-400',\n//                       isEqual(day, selectedDay) && isToday(day) && 'bg-red-500',\n//                       isEqual(day, selectedDay) &&\n//                         !isToday(day) &&\n//                         'bg-gray-900',\n//                       !isEqual(day, selectedDay) && 'hover:bg-gray-200',\n//                       (isEqual(day, selectedDay) || isToday(day)) &&\n//                         'font-semibold',\n//                       'mx-auto flex h-8 w-8 items-center justify-center rounded-full'\n//                     )}\n//                   >\n//                     <time dateTime={format(day, 'yyyy-MM-dd')}>\n//                       {format(day, 'd')}\n//                     </time>\n//                   </button>\n\n                  \n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//           <section className=\"mt-12 md:mt-0 md:pl-14\">\n//             <h2 className=\"font-semibold text-gray-900\">\n//               Schedule for{' '}\n//               <time dateTime={format(selectedDay, 'yyyy-MM-dd')}>\n//                 {format(selectedDay, 'MMM dd, yyy')}\n//               </time>\n//             </h2>\n           \n//           </section>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\n\n\n// let colStartClasses = [\n//   '',\n//   'col-start-2',\n//   'col-start-3',\n//   'col-start-4',\n//   'col-start-5',\n//   'col-start-6',\n//   'col-start-7',\n// ]"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKpC,MAAMC,IAAI,GAAGN,QAAQ,CAACO,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTL,OAAA,CAACN,KAAK,CAACY,UAAU;EAAAC,QAAA,eACfP,OAAA,CAACQ,EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACU,CACpB,CAAC;;AAED;AACA;AACA;AACAf,eAAe,CAAC,CAAC;;AAWjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}